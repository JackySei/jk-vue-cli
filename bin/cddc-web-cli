#!/usr/bin/env node
const program = require('commander')
const inquirer = require('inquirer')
const packageJson = require('../package.json')
const path = require('path')
const downloadGitRepo = require('download-git-repo')
const fs = require('fs-extra')
const ora = require('ora')
const { exec } = require('child_process')

program.version(packageJson.version)
program
  .command('create')
  .alias('i')
  .description('创建模板')
  .action(async () => {
    const { projectName, template } = await inquirer.prompt([
      {
        type: 'input',
        name: 'projectName',
        message: '请输入项目名称：'
      },
      {
        type: 'list',
        name: 'template',
        message: '请选择模版：',
        choices: [
          {
            name: 'vue3-elementplus-admin',
            value: 'https://gitee.com/JackySei/element-plus-template.git'
          },
          {
            name: 'vue3-naiveui-admin',
            value: 'https://github.com:JackySei/naive-ui-admin'
          }
        ]
      }
    ])
    console.log('projectName===', projectName)
    console.log('template===', template)
    // 获取目标文件夹
    const dest = path.join(process.cwd(), projectName)
    // 判断是否存在同名文件
    if (fs.existsSync(dest)) {
      const { isExist } = await inquirer.prompt({
        type: 'confirm',
        name: 'isExist',
        message: '您输入的项目名称已存在，是否覆盖？'
      })
      // 如果覆盖就删除文件夹，否则退出
      isExist ? fs.removeSync(dest) : process.exit(1)
    }
    // 拉取模板文件
    // 开启loading
    const loadingTemplate = ora('正在下载模板...')
    loadingTemplate.start()
    downloadGitRepo(template, dest, (err) => {
      if (err) {
        loadingTemplate.fail('创建模版失败' + err.message)
        return
      }
      loadingTemplate.succeed('创建模版成功')
      // 初始化拉取的模板项目的 package.json
      // 修改package.json
      const pkgPath = path.join(process.cwd(), projectName, 'package.json')
      const pkgContent = fs.readFileSync(pkgPath, 'utf-8')
      const pkgJson = JSON.parse(pkgContent)
      pkgJson.name = projectName
      pkgJson.version = '1.0.0'
      fs.writeFileSync(pkgPath, JSON.stringify(pkgJson, null, 2))
      // 自动安装相关依赖
      const loadingInstall = ora('正在下载包依赖...')
      loadingInstall.start()
      exec(
        'npm i',
        {
          cwd: path.join(process.cwd(), projectName)
        },
        function (error) {
          if (error) {
            loadingInstall.fail('依赖安装失败')
            return
          }
          loadingInstall.succeed('依赖安装成功')
        }
      )
    })
  })

program.parse(process.argv)
